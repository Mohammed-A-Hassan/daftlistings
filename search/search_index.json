{
    "docs": [
        {
            "location": "/", 
            "text": "Installation\n\n\ndaftlistings is available on the \nPython Package Index (PyPI)\n.\n\n\nYou can install daftlistings using pip.\n\n\nvirtualenv env\nsource env/bin/activate\npip install daftlistings\n\n\n\nDocumentation\n\n\nThe documentation has been created using mkdocs and the mkdocs material theme. To update the documentation, clone the repository and edit the markdown files in the docs/ directory.\n\n\nTo view your changes, run:\n\n\n$ mkdocs serve\n\n\n\nTo build and publish the documentation, run:\n\n\n$ sh deploy_docs.sh \"Updating documentation\"", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation", 
            "text": "daftlistings is available on the  Python Package Index (PyPI) .  You can install daftlistings using pip.  virtualenv env\nsource env/bin/activate\npip install daftlistings", 
            "title": "Installation"
        }, 
        {
            "location": "/#documentation", 
            "text": "The documentation has been created using mkdocs and the mkdocs material theme. To update the documentation, clone the repository and edit the markdown files in the docs/ directory.  To view your changes, run:  $ mkdocs serve  To build and publish the documentation, run:  $ sh deploy_docs.sh \"Updating documentation\"", 
            "title": "Documentation"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\nGet the current properties for rent in Dublin that are between \u20ac1000 and\n\u20ac1500 per month and contact the advertiser for each listing.\n\n\nfrom daftlistings import Daft, CommercialType, RentType\n\ndaft = Daft()\ndaft.set_county('Dublin City')\ndaft.set_listing_type(RentType.APARTMENTS)\ndaft.set_min_price(1000)\ndaft.set_max_price(1500)\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(listing.get_price())\n    for facility in listing.get_facilities():\n        print(facility)\n\n    contact = listing.contact_advertiser(\n        name=\nJane Doe\n,\n        contact_number=\n019202222\n,\n        email=\njane@example.com\n,\n        message=\nHi, I seen your listing on daft.ie and I would like to schedule a viewing.\n\n    )\n\n    if contact:\n        print(\nMessage sent to advertiser!\n)\n\n    print(' ')\n\n\n\n\nRetrieve commercial office listings in Dublin.\n\n\nfrom daftlistings import Daft, CommercialType, SaleType\n\ndaft = Daft()\n\ndaft.set_county(\nDublin\n)\ndaft.set_listing_type(SaleType.COMMERCIAL)\ndaft.set_commercial_property_type(CommercialType.OFFICE)\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(listing.get_price())\n    print(' ')\n\n\n\n\nGet the current sale agreed prices for properties in Dublin.\n\n\nfrom daftlistings import Daft, SaleType\n\ndaft = Daft()\n\ndaft.set_county('Dublin City')\ndaft.set_listing_type(SaleType.PROPERTIES)\ndaft.set_min_price(1000)\ndaft.set_max_price(1500)\ndaft.set_sale_agreed(True)\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(listing.get_price())\n    print(' ')\n\n\n\n\nYou can sort the listings by price, distance, upcoming viewing or date\nusing the SortType object. The SortOrder object allows you to sort the\nlistings descending or ascending. For example:\n\n\nfrom daftlistings import SortOrder, SortType, SaleType, SortOrder\n\ndaft = Daft()\n\ndaft.set_county('Dublin City')\ndaft.set_area('Lucan')\ndaft.set_listing_type(SaleType.PROPERTIES)\ndaft.set_min_price(150000)\ndaft.set_max_price(175000)\ndaft.set_sort_order(SortOrder.ASCENDING)\ndaft.set_sort_by(SortType.PRICE)\n\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(listing.get_price())\n    print(' ')\n\n\n\n\nRetrieve all properties for sale in a given list of areas. This example\nloops through each page of listings and prints the result.\n\n\nfrom daftlistings import Daft, SaleType\n\noffset = 0\npages = True\n\nwhile pages:\n    daft = Daft()\n    daft.set_county('Dublin')\n    daft.set_area([\n        'Blackrock',\n        'Castleknock',\n        'Drumcondra',\n        'Blanchardstown',\n        'IFSC',\n        'Grand Canal Dock'\n    ])\n    daft.set_listing_type(SaleType.PROPERTIES)\n    daft.set_offset(offset)\n\n    listings = daft.get_listings()\n\n    if not listings:\n        pages = False\n\n    for listing in listings:\n        print(listing.get_agent_url())\n        print(listing.get_price())\n        print(listing.get_formalised_address())\n        print(listing.get_daft_link())\n        print(' ')\n\n\n    offset += 10\n\n\n\n\nGet apartments to let in Dublin City along the Dart line.\n\n\nfrom daftlistings import Daft, AreaType, RentType, TransportRoute\n\ndaft = Daft()\n\ndaft.set_county('Dublin City')\ndaft.set_area_type(AreaType.TRANSPORT_ROUTE)\ndaft.set_listing_type(RentType.APARTMENTS)\ndaft.set_public_transport_route(TransportRoute.DART)\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_price())\n    print(listing.get_daft_link())\n    print(' ')\n\n\n\n\nFind student accommodation near Trinity College Dublin that is between\n800 and 1000 per\nmonth.\n\n\nfrom daftlistings import Daft, University, StudentAccommodationType, SortType, SortOrder, RentType\n\ndaft = Daft()\n\ndaft.set_listing_type(RentType.STUDENT_ACCOMMODATION)\ndaft.set_university(University.TCD)\ndaft.set_student_accommodation_type(StudentAccommodationType.ROOM_TO_SHARE)\ndaft.set_min_price(800)\ndaft.set_max_price(1000)\ndaft.set_sort_by(SortType.PRICE)\ndaft.set_sort_order(SortOrder.ASCENDING)\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_price())\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(' ')\n\n\n\n\nSearch for people to teamup with in Dublin.\n\n\nfrom daftlistings import TeamUpWith, Teamup, County\n\nt = Teamup()\nt.set_county(County.DUBLIN)\nt.set_team_up_with(TeamUpWith.ANY)\nt.set_rent(800)\nt.set_move_in_date(0)\nresults = t.get_results()\n\nfor r in results:\n    print(\nName: \n + r.name())\n    print(\nGender: \n + r.gender())\n    print(\nPrice Range: \n + r.price_range())\n    print(\nAreas of Interest: \n + r.areas_of_interest())\n    print(\nLooking for: \n + r.looking_for())\n    print(\nLength of Lease: \n + r.length_of_lease())\n    print(\nDate available: \n + r.date_available())\n    print(\nDate entered: \n +", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "Get the current properties for rent in Dublin that are between \u20ac1000 and\n\u20ac1500 per month and contact the advertiser for each listing.  from daftlistings import Daft, CommercialType, RentType\n\ndaft = Daft()\ndaft.set_county('Dublin City')\ndaft.set_listing_type(RentType.APARTMENTS)\ndaft.set_min_price(1000)\ndaft.set_max_price(1500)\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(listing.get_price())\n    for facility in listing.get_facilities():\n        print(facility)\n\n    contact = listing.contact_advertiser(\n        name= Jane Doe ,\n        contact_number= 019202222 ,\n        email= jane@example.com ,\n        message= Hi, I seen your listing on daft.ie and I would like to schedule a viewing. \n    )\n\n    if contact:\n        print( Message sent to advertiser! )\n\n    print(' ')  Retrieve commercial office listings in Dublin.  from daftlistings import Daft, CommercialType, SaleType\n\ndaft = Daft()\n\ndaft.set_county( Dublin )\ndaft.set_listing_type(SaleType.COMMERCIAL)\ndaft.set_commercial_property_type(CommercialType.OFFICE)\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(listing.get_price())\n    print(' ')  Get the current sale agreed prices for properties in Dublin.  from daftlistings import Daft, SaleType\n\ndaft = Daft()\n\ndaft.set_county('Dublin City')\ndaft.set_listing_type(SaleType.PROPERTIES)\ndaft.set_min_price(1000)\ndaft.set_max_price(1500)\ndaft.set_sale_agreed(True)\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(listing.get_price())\n    print(' ')  You can sort the listings by price, distance, upcoming viewing or date\nusing the SortType object. The SortOrder object allows you to sort the\nlistings descending or ascending. For example:  from daftlistings import SortOrder, SortType, SaleType, SortOrder\n\ndaft = Daft()\n\ndaft.set_county('Dublin City')\ndaft.set_area('Lucan')\ndaft.set_listing_type(SaleType.PROPERTIES)\ndaft.set_min_price(150000)\ndaft.set_max_price(175000)\ndaft.set_sort_order(SortOrder.ASCENDING)\ndaft.set_sort_by(SortType.PRICE)\n\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(listing.get_price())\n    print(' ')  Retrieve all properties for sale in a given list of areas. This example\nloops through each page of listings and prints the result.  from daftlistings import Daft, SaleType\n\noffset = 0\npages = True\n\nwhile pages:\n    daft = Daft()\n    daft.set_county('Dublin')\n    daft.set_area([\n        'Blackrock',\n        'Castleknock',\n        'Drumcondra',\n        'Blanchardstown',\n        'IFSC',\n        'Grand Canal Dock'\n    ])\n    daft.set_listing_type(SaleType.PROPERTIES)\n    daft.set_offset(offset)\n\n    listings = daft.get_listings()\n\n    if not listings:\n        pages = False\n\n    for listing in listings:\n        print(listing.get_agent_url())\n        print(listing.get_price())\n        print(listing.get_formalised_address())\n        print(listing.get_daft_link())\n        print(' ')\n\n\n    offset += 10  Get apartments to let in Dublin City along the Dart line.  from daftlistings import Daft, AreaType, RentType, TransportRoute\n\ndaft = Daft()\n\ndaft.set_county('Dublin City')\ndaft.set_area_type(AreaType.TRANSPORT_ROUTE)\ndaft.set_listing_type(RentType.APARTMENTS)\ndaft.set_public_transport_route(TransportRoute.DART)\n\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_formalised_address())\n    print(listing.get_price())\n    print(listing.get_daft_link())\n    print(' ')  Find student accommodation near Trinity College Dublin that is between\n800 and 1000 per\nmonth.  from daftlistings import Daft, University, StudentAccommodationType, SortType, SortOrder, RentType\n\ndaft = Daft()\n\ndaft.set_listing_type(RentType.STUDENT_ACCOMMODATION)\ndaft.set_university(University.TCD)\ndaft.set_student_accommodation_type(StudentAccommodationType.ROOM_TO_SHARE)\ndaft.set_min_price(800)\ndaft.set_max_price(1000)\ndaft.set_sort_by(SortType.PRICE)\ndaft.set_sort_order(SortOrder.ASCENDING)\nlistings = daft.get_listings()\n\nfor listing in listings:\n    print(listing.get_price())\n    print(listing.get_formalised_address())\n    print(listing.get_daft_link())\n    print(' ')  Search for people to teamup with in Dublin.  from daftlistings import TeamUpWith, Teamup, County\n\nt = Teamup()\nt.set_county(County.DUBLIN)\nt.set_team_up_with(TeamUpWith.ANY)\nt.set_rent(800)\nt.set_move_in_date(0)\nresults = t.get_results()\n\nfor r in results:\n    print( Name:   + r.name())\n    print( Gender:   + r.gender())\n    print( Price Range:   + r.price_range())\n    print( Areas of Interest:   + r.areas_of_interest())\n    print( Looking for:   + r.looking_for())\n    print( Length of Lease:   + r.length_of_lease())\n    print( Date available:   + r.date_available())\n    print( Date entered:   +", 
            "title": "Examples"
        }, 
        {
            "location": "/daft/", 
            "text": "Module daftlistings.daft\n\n\nClasses\n\n\nDaft\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.daft.Daft\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n__init__\n (self)\n\n\n\n\n\n\nget_listings\n (self)\n\n\nThe get listings function returns an array of Listing objects.\n\n\n\n\n:return: Listing object\n\n\n\n\n\n\n\n\nset_added_since\n (self, added)\n\n\nSet this to retrieve ads that are a given number of days old.  \n\n\n\n\n\n\nFor example to retrieve listings that have been been added a week ago: set_added_since(7)\n\n\n\n\n\n\n:param added: int\n\n\n\n\n\n\n\n\n\n\nset_address\n (self, address)\n\n\nSet the address.\n:param address:\n\n\n\n\n\n\nset_area\n (self, area)\n\n\nThe area to retrieve listings from. Use an array to search multiple areas.\n:param area:\n\n:return:\n\n\n\n\n\n\nset_area_type\n (self, area_type)\n\n\nSet the area type.\n\n\n\n\n:param area_type: AreaType\n\n\n\n\n\n\n\n\nset_commercial_max_size\n (self, commercial_max_size)\n\n\nThe maximum size in sq ft.\n:param commercial_max_size:\n\n:return:\n\n\n\n\n\n\nset_commercial_min_size\n (self, commercial_min_size)\n\n\nThe minimum size in sq ft.\n:param commercial_min_size:\n\n:return:\n\n\n\n\n\n\nset_commercial_property_type\n (self, commercial_property_type)\n\n\nUse the CommercialType object to set the commercial property type.\n:param commercial_property_type:\n\n:return:\n\n\n\n\n\n\nset_county\n (self, county)\n\n\nThe county to retrieve listings from.\n:param county:\n\n:return:\n\n\n\n\n\n\nset_couples_accepted\n (self, couples_accepted)\n\n\nSet to true to only return listings that accept couples.\n:param couples_accepted:\n\n\n\n\n\n\nset_ensuite_only\n (self, ensuite_only)\n\n\nSet to true to only return listings that are ensuite only.\n:param ensuite_only:\n\n\n\n\n\n\nset_furnished\n (self, furnished)\n\n\nSet to true to only get rental properties that are furnished.\n:param furnished:\n\n:return:\n\n\n\n\n\n\nset_gender\n (self, gender_type)\n\n\n\n\n\n\nset_keywords\n (self, keywords)\n\n\nPass an array to filter the result by keywords.\n\n\n\n\n:param keywords\n\n\n\n\n\n\n\n\nset_listing_type\n (self, listing_type)\n\n\nThe listings you'd like to scrape i.e houses, properties, auction, commercial or apartments.\n\nUse the SaleType or RentType enum to select the listing type.\ni.e set_listing_type(SaleType.PROPERTIES)\n:param listing_type:\n\n:return:\n\n\n\n\n\n\nset_max_beds\n (self, max_beds)\n\n\nThe maximum number of beds.\n:param max_beds:\n\n:return:\n\n\n\n\n\n\nset_max_lease\n (self, max_lease)\n\n\nSet the maximum lease period in months.\n\n\n\n\n:param max_lease: int\n\n\n\n\n\n\n\n\nset_max_price\n (self, max_price)\n\n\nThe maximum price.\n:param max_price:\n\n:return:\n\n\n\n\n\n\nset_min_beds\n (self, min_beds)\n\n\nThe minimum number of beds.\n:param min_beds:\n\n:return:\n\n\n\n\n\n\nset_min_lease\n (self, min_lease)\n\n\nSet the minimum lease period in months.\n\n\n\n\n:param min_lease: int\n\n\n\n\n\n\n\n\nset_min_price\n (self, min_price)\n\n\nThe minimum price.\n:param min_price:\n\n:return:\n\n\n\n\n\n\nset_num_occupants\n (self, num_occupants)\n\n\nSet the max number of occupants living in the property for rent.\n\n\n\n\n:param num_occupants: int\n\n\n\n\n\n\n\n\nset_offset\n (self, offset)\n\n\nThe page number which is in increments of 10. The default page number is 0.\n:param offset:\n\n:return:\n\n\n\n\n\n\nset_open_viewing\n (self, open_viewing)\n\n\nSet to True to only search for properties that have upcoming 'open for viewing' dates.\n:param open_viewing:\n\n:return:\n\n\n\n\n\n\nset_public_transport_route\n (self, public_transport_route)\n\n\nSet the public transport route.\n\n\n\n\n:param public_transport_route: TransportRoute\n\n\n\n\n\n\n\n\nset_room_type\n (self, room_type)\n\n\nSet the room type.\n:param room_type:\n\n\n\n\n\n\nset_sale_agreed\n (self, sale_agreed)\n\n\nIf set to True, we'll scrape listings that are sale agreed.\n:param sale_agreed:\n\n:return:\n\n\n\n\n\n\nset_sort_by\n (self, sort_by)\n\n\nUse this method to sort by price, distance, upcoming viewing or date using the SortType object.\n:param sort_by:\n\n:return:\n\n\n\n\n\n\nset_sort_order\n (self, sort_order)\n\n\nUse the SortOrder object to sort the listings descending or ascending.\n:param sort_order:\n\n:return:\n\n\n\n\n\n\nset_student_accommodation_type\n (self, student_accommodation_type)\n\n\nSet the student accomodation type.\n\n\n\n\n:param student_accommodation_type: StudentAccomodationType\n\n\n\n\n\n\n\n\nset_university\n (self, university)\n\n\nSet the university.\n\n\n\n\n:param university: University\n:return:\n\n\n\n\n\n\n\n\nset_verbose\n (self, verbose)\n\n\nSet to True to print the HTTP requests.\n\n\n\n\n:param verbose\n\n\n\n\n\n\n\n\nset_with_photos\n (self, with_photos)\n\n\nSet to True to only get listings that has photos.\n\n\n\n\n:param with_photos", 
            "title": "Daft"
        }, 
        {
            "location": "/daft/#module-daftlistingsdaft", 
            "text": "", 
            "title": "Module daftlistings.daft"
        }, 
        {
            "location": "/daft/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/daft/#daft", 
            "text": "", 
            "title": "Daft"
        }, 
        {
            "location": "/daft/#ancestors-in-mro", 
            "text": "daftlistings.daft.Daft    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/daft/#methods", 
            "text": "__init__  (self)    get_listings  (self)  The get listings function returns an array of Listing objects.   :return: Listing object     set_added_since  (self, added)  Set this to retrieve ads that are a given number of days old.      For example to retrieve listings that have been been added a week ago: set_added_since(7)    :param added: int      set_address  (self, address)  Set the address.\n:param address:    set_area  (self, area)  The area to retrieve listings from. Use an array to search multiple areas.\n:param area: \n:return:    set_area_type  (self, area_type)  Set the area type.   :param area_type: AreaType     set_commercial_max_size  (self, commercial_max_size)  The maximum size in sq ft.\n:param commercial_max_size: \n:return:    set_commercial_min_size  (self, commercial_min_size)  The minimum size in sq ft.\n:param commercial_min_size: \n:return:    set_commercial_property_type  (self, commercial_property_type)  Use the CommercialType object to set the commercial property type.\n:param commercial_property_type: \n:return:    set_county  (self, county)  The county to retrieve listings from.\n:param county: \n:return:    set_couples_accepted  (self, couples_accepted)  Set to true to only return listings that accept couples.\n:param couples_accepted:    set_ensuite_only  (self, ensuite_only)  Set to true to only return listings that are ensuite only.\n:param ensuite_only:    set_furnished  (self, furnished)  Set to true to only get rental properties that are furnished.\n:param furnished: \n:return:    set_gender  (self, gender_type)    set_keywords  (self, keywords)  Pass an array to filter the result by keywords.   :param keywords     set_listing_type  (self, listing_type)  The listings you'd like to scrape i.e houses, properties, auction, commercial or apartments. \nUse the SaleType or RentType enum to select the listing type.\ni.e set_listing_type(SaleType.PROPERTIES)\n:param listing_type: \n:return:    set_max_beds  (self, max_beds)  The maximum number of beds.\n:param max_beds: \n:return:    set_max_lease  (self, max_lease)  Set the maximum lease period in months.   :param max_lease: int     set_max_price  (self, max_price)  The maximum price.\n:param max_price: \n:return:    set_min_beds  (self, min_beds)  The minimum number of beds.\n:param min_beds: \n:return:    set_min_lease  (self, min_lease)  Set the minimum lease period in months.   :param min_lease: int     set_min_price  (self, min_price)  The minimum price.\n:param min_price: \n:return:    set_num_occupants  (self, num_occupants)  Set the max number of occupants living in the property for rent.   :param num_occupants: int     set_offset  (self, offset)  The page number which is in increments of 10. The default page number is 0.\n:param offset: \n:return:    set_open_viewing  (self, open_viewing)  Set to True to only search for properties that have upcoming 'open for viewing' dates.\n:param open_viewing: \n:return:    set_public_transport_route  (self, public_transport_route)  Set the public transport route.   :param public_transport_route: TransportRoute     set_room_type  (self, room_type)  Set the room type.\n:param room_type:    set_sale_agreed  (self, sale_agreed)  If set to True, we'll scrape listings that are sale agreed.\n:param sale_agreed: \n:return:    set_sort_by  (self, sort_by)  Use this method to sort by price, distance, upcoming viewing or date using the SortType object.\n:param sort_by: \n:return:    set_sort_order  (self, sort_order)  Use the SortOrder object to sort the listings descending or ascending.\n:param sort_order: \n:return:    set_student_accommodation_type  (self, student_accommodation_type)  Set the student accomodation type.   :param student_accommodation_type: StudentAccomodationType     set_university  (self, university)  Set the university.   :param university: University\n:return:     set_verbose  (self, verbose)  Set to True to print the HTTP requests.   :param verbose     set_with_photos  (self, with_photos)  Set to True to only get listings that has photos.   :param with_photos", 
            "title": "Methods"
        }, 
        {
            "location": "/enums/", 
            "text": "Module daftlistings.enums\n\n\nClasses\n\n\nAreaType\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.AreaType\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nENROUTE\n\n\n\n\n\n\nTRANSPORT_ROUTE\n\n\n\n\n\n\nCommercialType\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.CommercialType\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nAGRICULTURAL_LAND\n\n\n\n\n\n\nCOMMERCIAL_SITE\n\n\n\n\n\n\nDEV_LAND\n\n\n\n\n\n\nINDUSTRIAL_SITE\n\n\n\n\n\n\nINDUSTRIAL_UNIT\n\n\n\n\n\n\nINVESTMENT_PROPERTY\n\n\n\n\n\n\nOFFICE\n\n\n\n\n\n\nOFFICE_SHARE\n\n\n\n\n\n\nOVERSEAS\n\n\n\n\n\n\nRESTAURANT_BAR_HOTEL\n\n\n\n\n\n\nRETAIL\n\n\n\n\n\n\nSERVICED_OFFICE\n\n\n\n\n\n\nCounty\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.County\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nALL\n\n\n\n\n\n\nANTRIM\n\n\n\n\n\n\nARMAGH\n\n\n\n\n\n\nCARLOW\n\n\n\n\n\n\nCAVAN\n\n\n\n\n\n\nCLARE\n\n\n\n\n\n\nCORK\n\n\n\n\n\n\nDERRY\n\n\n\n\n\n\nDONEGAL\n\n\n\n\n\n\nDOWN\n\n\n\n\n\n\nDUBLIN\n\n\n\n\n\n\nFERMANAGH\n\n\n\n\n\n\nGALWAY\n\n\n\n\n\n\nKERRY\n\n\n\n\n\n\nKILDARE\n\n\n\n\n\n\nKILKENNY\n\n\n\n\n\n\nLAOIS\n\n\n\n\n\n\nLEITRIM\n\n\n\n\n\n\nLIMERICK\n\n\n\n\n\n\nLONGFORD\n\n\n\n\n\n\nLOUTH\n\n\n\n\n\n\nMAYO\n\n\n\n\n\n\nMEATH\n\n\n\n\n\n\nMONAGHAN\n\n\n\n\n\n\nOFFALY\n\n\n\n\n\n\nROSCOMMON\n\n\n\n\n\n\nSLIGO\n\n\n\n\n\n\nTIPPERARY\n\n\n\n\n\n\nTYRONE\n\n\n\n\n\n\nWATERFORD\n\n\n\n\n\n\nWESTMEATH\n\n\n\n\n\n\nWEXFORD\n\n\n\n\n\n\nWICKLOW\n\n\n\n\n\n\nGender\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.Gender\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nEITHER\n\n\n\n\n\n\nFEMALE\n\n\n\n\n\n\nMALE\n\n\n\n\n\n\nQueryParam\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.QueryParam\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nADDRESS\n\n\n\n\n\n\nADVANCED\n\n\n\n\n\n\nCOMMERCIAL_MAX\n\n\n\n\n\n\nCOMMERCIAL_MIN\n\n\n\n\n\n\nCOUPLES_ACCEPTED\n\n\n\n\n\n\nDAYS_OLD\n\n\n\n\n\n\nENSUITE_ONLY\n\n\n\n\n\n\nFIND_TEAMUPS\n\n\n\n\n\n\nFURNISHED\n\n\n\n\n\n\nGENDER\n\n\n\n\n\n\nIGNORED_AGENTS\n\n\n\n\n\n\nKEYWORDS\n\n\n\n\n\n\nMAX_BEDS\n\n\n\n\n\n\nMAX_LEASE\n\n\n\n\n\n\nMAX_PRICE\n\n\n\n\n\n\nMIN_BEDS\n\n\n\n\n\n\nMIN_LEASE\n\n\n\n\n\n\nMIN_PRICE\n\n\n\n\n\n\nNUM_OCCUPANTS\n\n\n\n\n\n\nOPEN_VIEWING\n\n\n\n\n\n\nROOM_TYPE\n\n\n\n\n\n\nROUTE_ID\n\n\n\n\n\n\nSALE_AGREED\n\n\n\n\n\n\nSALE_AGREED_WITH_PRICE\n\n\n\n\n\n\nSORT_BY\n\n\n\n\n\n\nSORT_ORDER\n\n\n\n\n\n\nWITH_PHOTOS\n\n\n\n\n\n\nRentType\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.RentType\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nANY\n\n\n\n\n\n\nAPARTMENTS\n\n\n\n\n\n\nAPARTMENT_TO_SHARE\n\n\n\n\n\n\nFLAT\n\n\n\n\n\n\nFLAT_TO_SHARE\n\n\n\n\n\n\nHOUSES\n\n\n\n\n\n\nHOUSE_SHARE\n\n\n\n\n\n\nPARKING_SPACES\n\n\n\n\n\n\nROOMS_TO_SHARE\n\n\n\n\n\n\nSHORT_TERM\n\n\n\n\n\n\nSTUDENT_ACCOMMODATION\n\n\n\n\n\n\nSTUDIO\n\n\n\n\n\n\nRoomType\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.RoomType\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nDOUBLE\n\n\n\n\n\n\nSHARED\n\n\n\n\n\n\nSINGLE\n\n\n\n\n\n\nSINGLE_OR_DOUBLE\n\n\n\n\n\n\nTWIN_ROOM\n\n\n\n\n\n\nSaleType\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.SaleType\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nAPARTMENTS\n\n\n\n\n\n\nAUCTION\n\n\n\n\n\n\nCOMMERCIAL\n\n\n\n\n\n\nHOUSES\n\n\n\n\n\n\nNEW\n\n\n\n\n\n\nOVERSEAS\n\n\n\n\n\n\nPROPERTIES\n\n\n\n\n\n\nSortOrder\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.SortOrder\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nASCENDING\n\n\n\n\n\n\nDESCENDING\n\n\n\n\n\n\nSortType\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.SortType\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nDATE\n\n\n\n\n\n\nDISTANCE\n\n\n\n\n\n\nPRICE\n\n\n\n\n\n\nUPCOMING_VIEWING\n\n\n\n\n\n\nStudentAccommodationType\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.StudentAccommodationType\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nANY\n\n\n\n\n\n\nAPARTMENTS\n\n\n\n\n\n\nFLAT\n\n\n\n\n\n\nROOMS_TO_SHARE\n\n\n\n\n\n\nSHORT_TERM\n\n\n\n\n\n\nSTUDIO\n\n\n\n\n\n\nTeamUpWith\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.TeamUpWith\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nANY\n\n\n\n\n\n\nCOUPLE\n\n\n\n\n\n\nFEMALE\n\n\n\n\n\n\nGROUP\n\n\n\n\n\n\nMALE\n\n\n\n\n\n\nTeamupSearch\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.TeamupSearch\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nAREA\n\n\n\n\n\n\nCOUNTY\n\n\n\n\n\n\nMOVE_IN_DATE\n\n\n\n\n\n\nRENT\n\n\n\n\n\n\nTEAM_UP_WITH\n\n\n\n\n\n\nTransportRoute\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.TransportRoute\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nDART\n\n\n\n\n\n\nLUAS_SANDYFORD_LINE\n\n\n\n\n\n\nLUAS_TALLAGHT_LINE\n\n\n\n\n\n\nUniversity\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.enums.University\n\n\n\n\n\n\nenum.Enum\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nDCU\n\n\n\n\n\n\nDIT\n\n\n\n\n\n\nGCD\n\n\n\n\n\n\nNCI\n\n\n\n\n\n\nTCD\n\n\n\n\n\n\nUCD\n\n\n\n\n\n\nWIT", 
            "title": "Enums"
        }, 
        {
            "location": "/enums/#module-daftlistingsenums", 
            "text": "", 
            "title": "Module daftlistings.enums"
        }, 
        {
            "location": "/enums/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/enums/#areatype", 
            "text": "", 
            "title": "AreaType"
        }, 
        {
            "location": "/enums/#ancestors-in-mro", 
            "text": "daftlistings.enums.AreaType    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables", 
            "text": "ENROUTE    TRANSPORT_ROUTE", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#commercialtype", 
            "text": "", 
            "title": "CommercialType"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_1", 
            "text": "daftlistings.enums.CommercialType    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_1", 
            "text": "AGRICULTURAL_LAND    COMMERCIAL_SITE    DEV_LAND    INDUSTRIAL_SITE    INDUSTRIAL_UNIT    INVESTMENT_PROPERTY    OFFICE    OFFICE_SHARE    OVERSEAS    RESTAURANT_BAR_HOTEL    RETAIL    SERVICED_OFFICE", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#county", 
            "text": "", 
            "title": "County"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_2", 
            "text": "daftlistings.enums.County    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_2", 
            "text": "ALL    ANTRIM    ARMAGH    CARLOW    CAVAN    CLARE    CORK    DERRY    DONEGAL    DOWN    DUBLIN    FERMANAGH    GALWAY    KERRY    KILDARE    KILKENNY    LAOIS    LEITRIM    LIMERICK    LONGFORD    LOUTH    MAYO    MEATH    MONAGHAN    OFFALY    ROSCOMMON    SLIGO    TIPPERARY    TYRONE    WATERFORD    WESTMEATH    WEXFORD    WICKLOW", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#gender", 
            "text": "", 
            "title": "Gender"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_3", 
            "text": "daftlistings.enums.Gender    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_3", 
            "text": "EITHER    FEMALE    MALE", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#queryparam", 
            "text": "", 
            "title": "QueryParam"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_4", 
            "text": "daftlistings.enums.QueryParam    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_4", 
            "text": "ADDRESS    ADVANCED    COMMERCIAL_MAX    COMMERCIAL_MIN    COUPLES_ACCEPTED    DAYS_OLD    ENSUITE_ONLY    FIND_TEAMUPS    FURNISHED    GENDER    IGNORED_AGENTS    KEYWORDS    MAX_BEDS    MAX_LEASE    MAX_PRICE    MIN_BEDS    MIN_LEASE    MIN_PRICE    NUM_OCCUPANTS    OPEN_VIEWING    ROOM_TYPE    ROUTE_ID    SALE_AGREED    SALE_AGREED_WITH_PRICE    SORT_BY    SORT_ORDER    WITH_PHOTOS", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#renttype", 
            "text": "", 
            "title": "RentType"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_5", 
            "text": "daftlistings.enums.RentType    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_5", 
            "text": "ANY    APARTMENTS    APARTMENT_TO_SHARE    FLAT    FLAT_TO_SHARE    HOUSES    HOUSE_SHARE    PARKING_SPACES    ROOMS_TO_SHARE    SHORT_TERM    STUDENT_ACCOMMODATION    STUDIO", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#roomtype", 
            "text": "", 
            "title": "RoomType"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_6", 
            "text": "daftlistings.enums.RoomType    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_6", 
            "text": "DOUBLE    SHARED    SINGLE    SINGLE_OR_DOUBLE    TWIN_ROOM", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#saletype", 
            "text": "", 
            "title": "SaleType"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_7", 
            "text": "daftlistings.enums.SaleType    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_7", 
            "text": "APARTMENTS    AUCTION    COMMERCIAL    HOUSES    NEW    OVERSEAS    PROPERTIES", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#sortorder", 
            "text": "", 
            "title": "SortOrder"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_8", 
            "text": "daftlistings.enums.SortOrder    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_8", 
            "text": "ASCENDING    DESCENDING", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#sorttype", 
            "text": "", 
            "title": "SortType"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_9", 
            "text": "daftlistings.enums.SortType    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_9", 
            "text": "DATE    DISTANCE    PRICE    UPCOMING_VIEWING", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#studentaccommodationtype", 
            "text": "", 
            "title": "StudentAccommodationType"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_10", 
            "text": "daftlistings.enums.StudentAccommodationType    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_10", 
            "text": "ANY    APARTMENTS    FLAT    ROOMS_TO_SHARE    SHORT_TERM    STUDIO", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#teamupwith", 
            "text": "", 
            "title": "TeamUpWith"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_11", 
            "text": "daftlistings.enums.TeamUpWith    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_11", 
            "text": "ANY    COUPLE    FEMALE    GROUP    MALE", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#teamupsearch", 
            "text": "", 
            "title": "TeamupSearch"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_12", 
            "text": "daftlistings.enums.TeamupSearch    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_12", 
            "text": "AREA    COUNTY    MOVE_IN_DATE    RENT    TEAM_UP_WITH", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#transportroute", 
            "text": "", 
            "title": "TransportRoute"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_13", 
            "text": "daftlistings.enums.TransportRoute    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_13", 
            "text": "DART    LUAS_SANDYFORD_LINE    LUAS_TALLAGHT_LINE", 
            "title": "Class variables"
        }, 
        {
            "location": "/enums/#university", 
            "text": "", 
            "title": "University"
        }, 
        {
            "location": "/enums/#ancestors-in-mro_14", 
            "text": "daftlistings.enums.University    enum.Enum    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/enums/#class-variables_14", 
            "text": "DCU    DIT    GCD    NCI    TCD    UCD    WIT", 
            "title": "Class variables"
        }, 
        {
            "location": "/exception/", 
            "text": "Module daftlistings.exception\n\n\nClasses\n\n\nDaftInputException\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.exception.DaftInputException\n\n\n\n\n\n\nexceptions.Exception\n\n\n\n\n\n\nexceptions.BaseException\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nargs\n\n\n\n\n\n\nmessage\n\n\n\n\n\n\nInstance variables\n\n\n\n\nreason\n\n\n\n\nMethods\n\n\n\n\n__init__\n (self, reason)\n\n\n\n\nDaftRequestException\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.exception.DaftRequestException\n\n\n\n\n\n\nexceptions.Exception\n\n\n\n\n\n\nexceptions.BaseException\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nClass variables\n\n\n\n\n\n\nargs\n\n\n\n\n\n\nmessage\n\n\n\n\n\n\nInstance variables\n\n\n\n\n\n\nreason\n\n\n\n\n\n\nstatus_code\n\n\n\n\n\n\nMethods\n\n\n\n\n__init__\n (self, status_code, reason)", 
            "title": "Exceptions"
        }, 
        {
            "location": "/exception/#module-daftlistingsexception", 
            "text": "", 
            "title": "Module daftlistings.exception"
        }, 
        {
            "location": "/exception/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/exception/#daftinputexception", 
            "text": "", 
            "title": "DaftInputException"
        }, 
        {
            "location": "/exception/#ancestors-in-mro", 
            "text": "daftlistings.exception.DaftInputException    exceptions.Exception    exceptions.BaseException    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/exception/#class-variables", 
            "text": "args    message", 
            "title": "Class variables"
        }, 
        {
            "location": "/exception/#instance-variables", 
            "text": "reason", 
            "title": "Instance variables"
        }, 
        {
            "location": "/exception/#methods", 
            "text": "__init__  (self, reason)", 
            "title": "Methods"
        }, 
        {
            "location": "/exception/#daftrequestexception", 
            "text": "", 
            "title": "DaftRequestException"
        }, 
        {
            "location": "/exception/#ancestors-in-mro_1", 
            "text": "daftlistings.exception.DaftRequestException    exceptions.Exception    exceptions.BaseException    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/exception/#class-variables_1", 
            "text": "args    message", 
            "title": "Class variables"
        }, 
        {
            "location": "/exception/#instance-variables_1", 
            "text": "reason    status_code", 
            "title": "Instance variables"
        }, 
        {
            "location": "/exception/#methods_1", 
            "text": "__init__  (self, status_code, reason)", 
            "title": "Methods"
        }, 
        {
            "location": "/listing/", 
            "text": "Module daftlistings.listing\n\n\nClasses\n\n\nListing\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.listing.Listing\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n__init__\n (self, data, verbose=False)\n\n\n\n\n\n\nas_dict\n (self)\n\n\nReturn a Listing object as Dictionary\n\n\n\n\n:return: dict\n\n\n\n\n\n\n\n\ncontact_advertiser\n (self, name, email, contact_number, message)\n\n\nThis method allows you to contact the advertiser of a listing.\n\n\n\n\n\n\n:param name: Your name\n\n\n\n\n\n\n:param email: Your email address.\n\n\n\n\n\n\n:param contact_number: Your contact number.\n\n\n\n\n\n\n:param message: Your message.\n:return:\n\n\n\n\n\n\n\n\n\n\nget_address_line_1\n (self)\n\n\nThis method returns the first line of the address.\n:return:\n\n\n\n\n\n\nget_address_line_2\n (self)\n\n\nThis method returns the second line of the address.\n:return:\n\n\n\n\n\n\nget_agent\n (self)\n\n\nThis method returns the agent name.\n:return:\n\n\n\n\n\n\nget_agent_url\n (self)\n\n\nThis method returns the agent's url.\n:return:\n\n\n\n\n\n\nget_area_size\n (self)\n\n\nThis method returns the area size. This method should only be called when retrieving commercial type listings.\n:return:\n\n\n\n\n\n\nget_contact_number\n (self)\n\n\nThis method returns the contact phone number.\n:return:\n\n\n\n\n\n\nget_county\n (self)\n\n\nThis method returns the county name.\n:return:\n\n\n\n\n\n\nget_daft_link\n (self)\n\n\nThis method returns the url of the listing.\n:return:\n\n\n\n\n\n\nget_dwelling_type\n (self)\n\n\nThis method returns the dwelling type.\n:return:\n\n\n\n\n\n\nget_facilities\n (self)\n\n\nThis method returns the properties facilities.\n:return:\n\n\n\n\n\n\nget_features\n (self)\n\n\nThis method returns the properties features.\n:return:\n\n\n\n\n\n\nget_formalised_address\n (self)\n\n\nThis method returns the formalised address.\n:return:\n\n\n\n\n\n\nget_listing_image\n (self)\n\n\nThis method returns the listing image.\n:return:\n\n\n\n\n\n\nget_num_bathrooms\n (self)\n\n\nThis method gets the number of bathrooms.\n:return:\n\n\n\n\n\n\nget_num_bedrooms\n (self)\n\n\nThis method gets the number of bedrooms.\n:return:\n\n\n\n\n\n\nget_posted_since\n (self)\n\n\nThis method returns the date the listing was entered.\n:return:\n\n\n\n\n\n\nget_price\n (self)\n\n\nThis method returns the price.\n:return:\n\n\n\n\n\n\nget_price_change\n (self)\n\n\nThis method returns any price change.\n:return:\n\n\n\n\n\n\nget_town\n (self)\n\n\nThis method returns the town name.\n:return:\n\n\n\n\n\n\nget_upcoming_viewings\n (self)\n\n\nReturns an array of upcoming viewings for a property.\n:return:", 
            "title": "Listing"
        }, 
        {
            "location": "/listing/#module-daftlistingslisting", 
            "text": "", 
            "title": "Module daftlistings.listing"
        }, 
        {
            "location": "/listing/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/listing/#listing", 
            "text": "", 
            "title": "Listing"
        }, 
        {
            "location": "/listing/#ancestors-in-mro", 
            "text": "daftlistings.listing.Listing    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/listing/#methods", 
            "text": "__init__  (self, data, verbose=False)    as_dict  (self)  Return a Listing object as Dictionary   :return: dict     contact_advertiser  (self, name, email, contact_number, message)  This method allows you to contact the advertiser of a listing.    :param name: Your name    :param email: Your email address.    :param contact_number: Your contact number.    :param message: Your message.\n:return:      get_address_line_1  (self)  This method returns the first line of the address.\n:return:    get_address_line_2  (self)  This method returns the second line of the address.\n:return:    get_agent  (self)  This method returns the agent name.\n:return:    get_agent_url  (self)  This method returns the agent's url.\n:return:    get_area_size  (self)  This method returns the area size. This method should only be called when retrieving commercial type listings.\n:return:    get_contact_number  (self)  This method returns the contact phone number.\n:return:    get_county  (self)  This method returns the county name.\n:return:    get_daft_link  (self)  This method returns the url of the listing.\n:return:    get_dwelling_type  (self)  This method returns the dwelling type.\n:return:    get_facilities  (self)  This method returns the properties facilities.\n:return:    get_features  (self)  This method returns the properties features.\n:return:    get_formalised_address  (self)  This method returns the formalised address.\n:return:    get_listing_image  (self)  This method returns the listing image.\n:return:    get_num_bathrooms  (self)  This method gets the number of bathrooms.\n:return:    get_num_bedrooms  (self)  This method gets the number of bedrooms.\n:return:    get_posted_since  (self)  This method returns the date the listing was entered.\n:return:    get_price  (self)  This method returns the price.\n:return:    get_price_change  (self)  This method returns any price change.\n:return:    get_town  (self)  This method returns the town name.\n:return:    get_upcoming_viewings  (self)  Returns an array of upcoming viewings for a property.\n:return:", 
            "title": "Methods"
        }, 
        {
            "location": "/person/", 
            "text": "Module daftlistings.person\n\n\nClasses\n\n\nPerson\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.person.Person\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nInstance variables\n\n\n\n\n\n\ndata\n\n\n\n\n\n\nrows\n\n\n\n\n\n\nsoup\n\n\n\n\n\n\ntd\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n__init__\n (self, td)\n\n\n\n\n\n\nareas_of_interest\n (self)\n\n\n\n\n\n\ndate_available\n (self)\n\n\n\n\n\n\ndate_entered\n (self)\n\n\n\n\n\n\ngender\n (self)\n\n\n\n\n\n\nlength_of_lease\n (self)\n\n\n\n\n\n\nlooking_for\n (self)\n\n\n\n\n\n\nname\n (self)\n\n\n\n\n\n\nprice_range\n (self)\n\n\n\n\n\n\nurl\n (self)", 
            "title": "Person"
        }, 
        {
            "location": "/person/#module-daftlistingsperson", 
            "text": "", 
            "title": "Module daftlistings.person"
        }, 
        {
            "location": "/person/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/person/#person", 
            "text": "", 
            "title": "Person"
        }, 
        {
            "location": "/person/#ancestors-in-mro", 
            "text": "daftlistings.person.Person    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/person/#instance-variables", 
            "text": "data    rows    soup    td", 
            "title": "Instance variables"
        }, 
        {
            "location": "/person/#methods", 
            "text": "__init__  (self, td)    areas_of_interest  (self)    date_available  (self)    date_entered  (self)    gender  (self)    length_of_lease  (self)    looking_for  (self)    name  (self)    price_range  (self)    url  (self)", 
            "title": "Methods"
        }, 
        {
            "location": "/teamup/", 
            "text": "Module daftlistings.teamup\n\n\nClasses\n\n\nTeamup\n\n\nAncestors (in MRO)\n\n\n\n\n\n\ndaftlistings.teamup.Teamup\n\n\n\n\n\n\nbuiltin\n.object\n\n\n\n\n\n\nInstance variables\n\n\n\n\n\n\nmove_in_date\n\n\n\n\n\n\nquery_params\n\n\n\n\n\n\nteam_up_with\n\n\n\n\n\n\nurl\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n__init__\n (self)\n\n\n\n\n\n\nget_results\n (self)\n\n\n\n\n\n\nset_county\n (self, county)\n\n\nWhat county do you live in?\n:param county:\n\n:return:\n\n\n\n\n\n\nset_move_in_date\n (self, move_in_date)\n\n\nWhen would you be ready to start looking for a place?\n:param move_in_date:\n\n:return:\n\n\n\n\n\n\nset_rent\n (self, rent)\n\n\nHow much rent would you be willing to pay each per month?\n:param rent:\n\n:return:\n\n\n\n\n\n\nset_team_up_with\n (self, team_up_with)\n\n\nWho would you like to team up with?\n:param team_up_with:\n\n:return:", 
            "title": "Teamup"
        }, 
        {
            "location": "/teamup/#module-daftlistingsteamup", 
            "text": "", 
            "title": "Module daftlistings.teamup"
        }, 
        {
            "location": "/teamup/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/teamup/#teamup", 
            "text": "", 
            "title": "Teamup"
        }, 
        {
            "location": "/teamup/#ancestors-in-mro", 
            "text": "daftlistings.teamup.Teamup    builtin .object", 
            "title": "Ancestors (in MRO)"
        }, 
        {
            "location": "/teamup/#instance-variables", 
            "text": "move_in_date    query_params    team_up_with    url", 
            "title": "Instance variables"
        }, 
        {
            "location": "/teamup/#methods", 
            "text": "__init__  (self)    get_results  (self)    set_county  (self, county)  What county do you live in?\n:param county: \n:return:    set_move_in_date  (self, move_in_date)  When would you be ready to start looking for a place?\n:param move_in_date: \n:return:    set_rent  (self, rent)  How much rent would you be willing to pay each per month?\n:param rent: \n:return:    set_team_up_with  (self, team_up_with)  Who would you like to team up with?\n:param team_up_with: \n:return:", 
            "title": "Methods"
        }
    ]
}